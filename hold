// VAL 1:
// Get current date
var currentDate = new Date();
var currentYear = currentDate.getFullYear();

// Check for leap year
function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
}

// Array to store number of days in each month
var daysInMonth = [31, isLeapYear(currentYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

// Example: Get number of days in February of the current year
var daysInFebruary = daysInMonth[1]; // February is index 1

console.log("Days in February:", daysInFebruary);

// OR:
let currentDate = new Date();
let currentYear = currentDate.getFullYear();

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
}

let daysInMonth = [
    31,
    isLeapYear(currentYear) ? 29 : 28,
    31, 30, 31, 30, 31, 31, 30, 31, 30, 31
];

console.log("Days in February:", daysInMonth[1]);


// VAL 2
function isValidDate(year, month, day) {
  // Check if year, month, and day are numbers
  if (isNaN(year) || isNaN(month) || isNaN(day)) {
      return false;
  }

  // Check if year is within a reasonable range
  if (year < 0 || year > 9999) {
      return false;
  }

  // Check if month is between 1 and 12
  if (month < 1 || month > 12) {
      return false;
  }

  // Check if day is valid for the selected month
  if (day < 1) {
      return false;
  }

  // Determine the number of days in the selected month
  var daysInMonth = 31; // Default to 31 days

  // Update daysInMonth for months with 30 days
  if (month === 4 || month === 6 || month === 9 || month === 11) {
      daysInMonth = 30;
  }
  // Update daysInMonth for February
  else if (month === 2) {
      daysInMonth = (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)) ? 29 : 28;
  }

  // Check if the provided day is within the valid range for the selected month
  if (day > daysInMonth) {
      return false;
  }

  // Additional checks can be added as needed

  return true;
}


// calc diff between dates:

// Assuming date1 and date2 are instances of Date representing two dates
function getDaysDifference(date1, date2) {
  const oneDay = 1000 * 60 * 60 * 24; // milliseconds in a day
  const differenceMs = Math.abs(date1.getTime() - date2.getTime());
  return Math.round(differenceMs / oneDay);
}

// Example usage:
const today = new Date();
const pastDate = new Date('2022-01-01');
const daysDifference = getDaysDifference(today, pastDate);
console.log(`Days difference: ${daysDifference}`);